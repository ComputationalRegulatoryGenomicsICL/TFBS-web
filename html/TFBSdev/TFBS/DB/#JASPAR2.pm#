package TFBS::DB::JASPAR2;
use vars qw(@ISA $AUTOLOAD);

use TFBS::Matrix::PWM;
use TFBS::Matrix::PFM;
use TFBS::Matrix;
use TFBS::MatrixSet;
use Bio::Root::RootI;
use DBI;

use strict;

@ISA = qw(TFBS::DB Bio::Root::RootI);

#########################################################################
# CONSTANTS
#########################################################################

use constant DEFAULT_CONNECTSTRING => "dbi:mysql:JASPAR2"; # on localhost
use constant DEFAULT_USER          => "";
use constant DEFAULT_PASSWORD      => "";

sub new  {
    my ($caller, %args)  = @_;
    my $class = ref $caller || $caller;
    my $self = bless {}, $class;

    my ($connectstring, $user, $password);
 
    if ($args{'-connect'} and ref($args{'connect'} eq "ARRAY"))  {
	($connectstring, $user, $password) = @{$args{'-connect'}};
    }
    else  {
	($connectstring, $user, $password) = 
	    (DEFAULT_CONNECTSTRING, DEFAULT_USER, DEFAULT_PASSWORD);
    }

    $self->dbh( DBI->connect($connectstring, $user, $password) );
    
    return $self;
}

sub connect  {
    # a synonim for new
    my ($caller, %args) = @_;
    $caller->new(%args);
}

sub dbh  {
    my ($self, $dbh) = @_;
    $self->{'dbh'} = $dbh if $dbh;
    return $self->{'dbh'};
}

sub get_Matrix_by_ID {

    my ($self, $ID, $mt) = @_;
    $mt = (uc($mt) or "PWM");

    unless (defined $ID) {
	$self->throw("No ID passed to get_Matrix_by_ID");
    }
    my $matrixobj;
    {
	no strict 'refs';
	my $ucmt = uc $mt;
	my $matrixstring = $self->_get_matrixstring($ID, $mt);
	
	eval("\$matrixobj= TFBS::Matrix::$ucmt->new".' 
	    ( -ID    => $ID,
	      -name  => $self->_get_name($ID)."",
	      -class => $self->_get_class($ID)."",
	      -matrix=> $matrixstring   # FIXME - temporary
	      );');
	if ($@) {$self->throw($@); }
    }

    return $matrixobj;
}

sub get_Matrix_by_name {
    my ($self, $name, $mt) = @_;
    unless(defined $name) { 
	$self->throw("No name passed to get_Matrix_by_name."); }

    my @IDlist = $self->_get_IDlist_by_query(-names=>[$name]);
    my $ID= ($IDlist[0] 
	    or $self->warn("No matrix with name $name found."));
    if ((my $L= scalar @IDlist) > 1)  {
	$self->warn("There are $L matrices with name '$name'");
    }
    return $self->get_Matrix_by_ID($ID, $mt);
}


sub _get_IDlist_by_query  {

    # called by get_matrixset
    my ($self, %args) = @_;
    my ($TABLES, %arrayref);
     $args{-names}     and  $arrayref{name}   = $args{-names}    ;
    $args{-classes}   and  $arrayref{class}  = $args{-classes}  ;
    $args{-sysgroups} and  $arrayref{phylum} = $args{-sysgroups};
    $args{-IDs}       and  $arrayref{ID}     = $args{-IDs};
    my @andconditions;
    if ($args{-species})  {
	$TABLES = ' matrix_info, matrix_species ';
	push @andconditions, 
	'matrix_info.ID = matrix_species.ID',
	" (".
	    join(" OR ", 
	         (map {"matrix_species.species=".
			   $self->dbh->quote($_)
			   } 
		  @{$args{-species}}
		  )).
		      ") ";
    }
    else  {
	$TABLES = 'matrix_info ';
    }
    
    foreach my $key (keys %arrayref)  {
	push @andconditions,
	"(".
	join(" OR ",
	     (map {"matrix_info.$key=".
		       $self->dbh->quote($_)
		  } 
	      @{$arrayref{$key}}
	     )).
	")";
    }

    my $WHERE = ((scalar @andconditions) == 0) ? "" : " WHERE ";

    my $query = 
	    "SELECT DISTINCTROW matrix_info.id FROM $TABLES $WHERE".
	    join(" AND ", @andconditions);
    
    my $sth = $self->dbh->prepare($query);
    $sth->execute() or $self->throw("Query failed:\n$query\n");
    
    # collect IDs and return

    my @IDlist = ();
    while (my ($id) = $sth->fetchrow_array())  {
	push @IDlist, $id;
    }

    $sth->finish;
    return @IDlist;
}


sub get_MatrixSet  {
    my ($self, %args) = @_;
    my @IDlist = $self->_get_IDlist_by_query(%args);
    my $mt = ($args{-matrixtype} or "PWM");
    my $matrixset = TFBS::MatrixSet->new();
    foreach (@IDlist)  {
	# print STDERR "MIN_IC ".$args{-min_ic}." ".
	#    $self->_get_total_ic($_)."\n";
	next if ($args{-min_ic} 
		 and $self->_get_total_ic($_) < $args{-min_ic});
	$matrixset->add_Matrix($self->get_Matrix_by_ID($_, $mt));
    }
    return $matrixset;
}


sub _get_matrixstring  {
    my ($self, $ID, $mt) = @_;
    my %dbname = (PWM => 'pwm', PFM => 'raw', ICM => 'info');
    unless (defined $dbname{$mt})  {
	$self->throw("Unsupported matrix type: ".$mt);
    }
    my $sth;
    my $qID = $self->dbh->quote($ID);
    my $matrixstring = "";
    foreach my $base (qw(A C G T)) {
	$sth=$self->dbh->prepare
	    ("SELECT $dbname{$mt} FROM matrix_data 
              WHERE ID=$qID AND base='$base' ORDER BY position");
	$sth->execute;
	$matrixstring .=
	    join (" ", (map {$_->[0]} @{$sth->fetchall_arrayref()}))."\n";
    }
    $sth->finish;
    return undef if $matrixstring eq "\n"x4;

    return $matrixstring;
}

sub AUTOLOAD  {
    my ($self, $ID) = @_;
    no strict 'refs';
    my $TABLE;
    my %dbname_of = (ID       => 'ID',
		     name     => 'name',
		     class    => 'class', 
		     species  => 'species', 
		     sysgroup => 'phylum',
		     type     => 'type',
		     seqdb    => 'seq_db',
		     acc      => 'seq',
		     total_ic => 'information',
		     medline  => 'medline'
		     ); 
    my ($where_column, $where_value);
    if ($AUTOLOAD =~ /.*::_get_(\w+)_list/) {
	defined $dbname_of{$1} or $self->throw("$AUTOLOAD: no such method!");
	($where_column, $where_value) = (1,1);
	
    }
    elsif ($AUTOLOAD =~ /.*::_get_(\w+)/) {
	defined $dbname_of{$1} or $self->throw("$AUTOLOAD: no such method!");
	defined $ID or $self->throw("No ID provided for $AUTOLOAD");
	($where_column, $where_value) = ('ID', $ID);
    }
    else  {
	$self->throw("$AUTOLOAD: no such method!");
    }
    defined $dbname_of{$1} or $self->throw("$AUTOLOAD: no such method!");
    if    ($1 eq 'species')  { $TABLE = 'matrix_species'; }
    elsif ($1 eq 'seqdb' or $1 eq 'acc') { $TABLE = 'matrix_seqs', }
    else  { $TABLE = 'matrix_info' ; }
    my @results = $self->_simple_query ($TABLE, $dbname_of{$1}, 
					$where_column => $where_value);
    wantarray ? return @results : return $results[0];
}

sub _simple_query  {
    my ($self, $table, $retr_field, $search_field, $search_value) = @_;
    my $q_value = $self->dbh->quote($search_value);
    my $sth = $self->dbh->prepare
	("SELECT DISTINCT $retr_field from $table WHERE $search_field = $q_value and $retr_field <> \"\" ORDER BY $retr_field");
    $sth->execute;
    return (map {$_->[0]} @{$sth->fetchall_arrayref});
}
	    
    

sub DESTROY  {
    $_[0]->dbh->disconnect();
}


1;
